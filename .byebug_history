continue
c
continue
c
@query
@action
next
next 3
next
continue
@listService
@listService.query
@listService = FaqModule::ListService.new({query: faq.question.split(" ").sample}, 'search')
faq.question.split(" ").sample
@listService
d = @listService.call
faq.question
faq.question.
faq.question.split(" ").sample
@listService = FaqModule::ListService.new({query: faq.question.split(" ").sample}, 'search')
faq
d = @listService.call
@listService
@listService = FaqModule::ListService.new({query: faq.question.split(" ").sample}, 'search')
faq.question.split(" ").sample
faq.questionfaq.question.split(" ").sampl
faq.persisted?
faq
c
next
expect(response).to match('Nada encontrado')
next
response = @listService.call();
@listService
next
c
Company.last
@company
 @listService.inspect
 @listService.call()
 @listService.call
 @listService
 @listService.call
response = @listService.call()
faq1.persisted?
faq1
faq
c
Faq.all
@company.faqs
@company.faqs.each{|x| puts x.id}
@compant.faqs.each{|x| x.id}
@compant.faqs.each{|X| X.id}
next
Faq.count
Faqs.count
@company
@company.faqs
@compant.faqs
next
@action
next
@action
next
@action
next
@action
next
@action
c
@hashtags
@hashtags.nil?
c
@hashtags
@createService.call
@createService
@createService = FaqModule::CreateService.new({"question-original" => @question, "answer-original" => @answer, "hashtags-original" => @hashtags})
c
next
x = FaqModule::CreateService.new({"question-original" => @question, "answer-original" => @answer})
x
x.call()
x
x = FaqModule::CreateService.new({"question-original" => @question, "answer-original" => @answer})
@hashtags
